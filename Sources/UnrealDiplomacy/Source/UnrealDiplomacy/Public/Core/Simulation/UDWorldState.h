// Copyright Miroslav Valach

#pragma once

#include "CoreMinimal.h"
#include "UDActionData.h"
#include "UDModifier.h"
#include "UDWorldState.generated.h"

/**
 * Represents single tile.
 * This needs to be duplicated as it's not generated by pure actions.
 */
UCLASS()
class UNREALDIPLOMACY_API UUDTileState : public UObject
{
	GENERATED_BODY()
public:
	/**
	 * Creates new instance of the tile state for specific location in array.
	 */
	static TObjectPtr<UUDTileState> CreateState(int32 x, int32 y);
	/**
	 * Creates new instance of the tile state for specific location in array.
	 */
	static TObjectPtr<UUDTileState> Duplicate(TObjectPtr<UUDTileState> existingState);
public:
	/**
	 * Position in map array.
	 */
	UPROPERTY()
	FIntPoint Position;
	/**
	 * Owner's unique id.
	 * Default is UUDWorldState::GaiaWorldStateId as this is inherently part of world state.
	 */
	UPROPERTY()
	int32 OwnerUniqueId;
	/**
	 * Type associated with this tile.
	 * Used by generator and UI to properly convey information (requires proper tile mapping).
	 * TODO proper tile mapping, see pseudo implementation in UDSqureGrid.
	 * Useable by Modifiers etc...
	 */
	UPROPERTY()
	int32 Type;
	/**
	 * List of all modifiers applied to this tile.
	 * This are modifiers that are applied to this tile.
	 */
	UPROPERTY()
	TArray<TObjectPtr<UUDModifier>> Modifiers;
};

/**
 * Represents map composed from tiles. 
 * This needs to be duplicated as it's not generated by pure actions.
 */
UCLASS()
class UNREALDIPLOMACY_API UUDMapState : public UObject
{
	GENERATED_BODY()
public:
	/**
	 * Creates new instance of the map state.
	 */
	static TObjectPtr<UUDMapState> CreateState(int32 mapSeed, int32 xSizeOfMap, int32 ySizeOfMap);
	/**
	 * Creates new instance of the map state based on existing one.
	 * Used for copying map to a state.
	 */
	static TObjectPtr<UUDMapState> Duplicate(TObjectPtr<UUDMapState> existingState);
public:
	/**
	 * Returns tile that is represented by provided FIntPoint.
	 */
	TObjectPtr<UUDTileState> GetTile(FIntPoint tile)
	{
		return Tiles[MapSizeOfX * tile.X + tile.Y];
	}
public:
	/**
	 * Each tile present in the world.
	 * Due to UE, this is represented as 1D array in Row-Major order (x * y).
	 * Access is then x * desired[x] + desired[y].
	 */
	UPROPERTY()
	TArray<TObjectPtr<UUDTileState>> Tiles;
	/**
	 * Seed used by generator.
	 */
	UPROPERTY()
	int32 MapSeed = 0;
	/**
	 * X size of Map (first in array).
	 */
	UPROPERTY()
	int32 MapSizeOfX = 0;
	/**
	 * Y size of Map (second in array).
	 */
	UPROPERTY()
	int32 MapSizeOfY = 0;
};

/**
 * Represents single Player/Ai state.
 */
UCLASS()
class UNREALDIPLOMACY_API UUDNationState : public UObject
{
	GENERATED_BODY()
public:
	/**
	 * Creates new instance of the player state for specified player.
	 */
	static TObjectPtr<UUDNationState> CreateState(int32 playerId);
public:
	/**
	 * List of unresolved requests created by actions 
	 * that are pending for confirm/reject action from this player.
	 */
	UPROPERTY()
	TArray<FUDActionData> PendingRequests;
	/**
	 * List of all modifiers applied to this player.
	 * This are modifiers that are applied to this player.
	 */
	UPROPERTY()
	TArray<TObjectPtr<UUDModifier>> Modifiers;
	/**
	 * Unique id assigned to the owner.
	 */
	UPROPERTY()
	int32 PlayerUniqueId;
	/**
	 *
	 */
	UPROPERTY()
	int32 ResourceGold = 0;
};

/**
 * Explains the current state of world in relation to state of play.
 */
UENUM(BlueprintType)
enum class EUDWorldSimulationState : uint8
{
	/**
	 * World is being prepared for play.
	 */
	INITIALIZING,
	/**
	 * Players action are allowed.
	 */
	PLAYING,
	/**
	 * Players action are no longer be allowed.
	 */
	FINISHING,
	MAX UMETA(Hidden)
};

/**
 * Represents current state of the deal. 
 * Multiple values can represent state, from which deal can't be changed!
 */
UENUM(BlueprintType)
enum class EUDDealSimulationState : uint8
{
	Error = 0,
	/**
	 * First phase represents creation of the new deal.
	 * 
	 * Step ends automatically as part of internal process. (Transitions to Creation.)
	 */
	Idea = 1,
	/**
	 * Second phase represents created empty deal with owner defined.
	 * 
	 * Step ends automatically as part of internal process. (Transitions to Specification.)
	 */
	Creation = 2,
	/**
	 * Third phase represents initial demands and/or requests as a primary discussion points.
	 * 
	 * This step allows user input.
	 * Step is always ended by user. (Transitions to Invitations.)
	 */
	CreatingDraft = 3,
	/**
	 * Fourth phase represents resolution of other players joining to participate or rejecting any idea of deal.
	 * Players have two options:
	 * - Accept/Join (Player will participate in the deal.)
	 * - Reject/Leave (Player won't participate in the deal.)
	 * - Players can suggest additional participant in the deal.
	 * - Owner can based on suggestion invite additional participant to the discussion.
	 * 
	 * Step ends once all players are resolved or owner forces and end to waiting time. (Transitions to Extension.)
	 * Unfinished invitations needs to be canceled.
	 */
	InvitePrimaryParticipants = 4,
	/**
	 * Fifth phase represents extension of items that are discussed as primary points.
	 * Each player can choose to add additional primary discussion point.
	 * Once all players choosed to either add or no. Next step begins.
	 * 
	 * Step ends when all players are finished or timer run out.
	 */
	Extension = 5,
	/**
	 * Sixth phase represents adding additional demands or requests binded to existing primary discussion points.
	 * 
	 * Step ends when all players are finished or timer run out.
	 */
	RequestsAndDemands = 6,
	/**
	 * Seventh phase represents bidding to appease demands and requests, invoked by others.
	 * Each player can choose if they want to offer something.
	 * 
	 * Step ends when all players are finished or timer run out.
	 */
	Bidding = 7,
	/**
	 * Eight phase represents player finalizing their option, e.g. selecting bids.
	 * 
	 * Step ends when all players are finished or timer run out.
	 */
	PreVote = 8,
	/**
	 * Ninth phase represents player voting to pass the deal or reject it.
	 * 
	 * Step ends when all players are finished or timer run out.
	 */
	Vote = 9,
	/**
	 * Tenth phase represents final result, e.g. deal is finished and it can't be changed further.
	 * 
	 * This step never changes to anything else.
	 */
	Result = 10,


	/**
	 * Deal is finilazed and can't be changed further.	 
	 */
	VOTING = 100,
	/**
	 * FINAL STATE!
	 * Each bullet point of deal is passed and will take effect.
	 */
	PASSED = 101,
	/**
	 * FINAL STATE!
	 * Voting ended in failure.
	 */
	VETOED = 102,
	/**
	 * FINAL STATE!
	 * Deal failed to keep at least one member and no new member can be invited.
	 */
	FALLEN_APART = 103,
	/**
	 * Informations about last deals are not present, possibly no deal was yet created.
	 */
	 MISSING = 104,
};

/**
 * Represents state of single deal that is being / was made.
 */
UCLASS()
class UNREALDIPLOMACY_API UUDDealState : public UObject
{
	GENERATED_BODY()
public:
	/**
	 * Creates new instance of the deal state.
	 */
	static TObjectPtr<UUDDealState> CreateState();
	UPROPERTY()
	EUDDealSimulationState DealSimulationState = EUDDealSimulationState::Idea;
	/**
	 * List of players that is currently participating in the deal.
	 */
	UPROPERTY()
	TArray<int32> Participants;
	/**
	 * List of players that can't be invited back to deal.
	 */
	UPROPERTY()
	TArray<int32> BlockedParticipants;
};

/**
 * Holds the state of a world.
 */
UCLASS()
class UNREALDIPLOMACY_API UUDWorldState : public UObject
{
	GENERATED_BODY()
public:
	/**
	 * Creates new instance of the world state.
	 * IsPlayerPerspectiveOnly defines if this state is supposed to hold all knowledge about the world.
	 */
	static TObjectPtr<UUDWorldState> CreateState(int32 playerId, bool isPlayerPerspectiveOnly);
	/**
	 * Gaia id.
	 */
	static const int32 GaiaWorldStateId = 0;
public:
	/**
	 * Current Map of tiles.
	 */
	UPROPERTY()
	TObjectPtr<UUDMapState> Map;
	/**
	 * Map of players with key as their id.
	 */
	UPROPERTY()
	TMap<int32, TObjectPtr<UUDNationState>> Players;
	/**
	 * List of players in turn order, represented only by their unique id.
	 */
	UPROPERTY()
	TArray<int32> PlayerOrder;
	/**
	 * Id associated with a Player/Ai, that controls this simulation.
	 */
	UPROPERTY()
	int32 PerspectivePlayerId;
	/**
	 * State either belongs to specific Player/Ai or is global.
	 */
	UPROPERTY()
	bool IsPlayerPerspectiveOnly;
	/**
	 * Current Player/Ai/Server that is able to act.
	 * Default value is 0.
	 */
	UPROPERTY()
	int32 CurrentTurnPlayerId = 0;
	/**
	 * Current turn, has no purpose other than flavor info.
	 * Default value is 0.
	 */
	UPROPERTY()
	int32 CurrentTurn = 0;
	/**
	 * Describes what is the state based on simulation changes.
	 * State is not completely safe to read if it's not yet in PLAYING.
	 */
	UPROPERTY()
	EUDWorldSimulationState WorldSimulationState = EUDWorldSimulationState::INITIALIZING;
	/**
	 * All deals that are / were done during the game.
	 */
	UPROPERTY()
	TArray<TObjectPtr<UUDDealState>> DealHistory;
};