// Copyright Miroslav Valach

#include "Core/Simulation/Actions/UDGameActionTileExploit.h"
#include "Core/UDGlobalData.h"
#include "Core/Simulation/UDActionData.h"
#include "Core/Simulation/UDWorldState.h"
#include "Core/Simulation/UDModifierManager.h"

bool UUDGameActionTileExploit::CanExecute(const FUDActionData& action, TObjectPtr<UUDWorldState> world) const
{
	FUDGameDataTileAmount data(action.ValueParameters);
	FIntPoint tile(data.X, data.Y);
	bool isTileOwner = world->Map->GetTile(tile)->OwnerUniqueId == action.InvokerFactionId;
	bool isTileRented = IsTileRented(world, tile, action.InvokerFactionId);
	bool canExploit = isTileOwner || isTileRented;
	return IUDActionInterface::CanExecute(action, world) && canExploit;
}

void UUDGameActionTileExploit::Execute(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Execute(action, world);
	// Exploit tile for resources.
	FUDGameDataTileAmount data(action.ValueParameters);
	world->Factions[action.InvokerFactionId]->ResourceGold += data.Amount;
}

void UUDGameActionTileExploit::Revert(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Revert(action, world);
	// Return exploited resources.
	FUDGameDataTileAmount data(action.ValueParameters);
	world->Factions[action.InvokerFactionId]->ResourceGold -= data.Amount;
}

void UUDGameActionTileExploit::SetModifierManager(TObjectPtr<UUDModifierManager> modifierManager)
{
	ModifierManager = modifierManager;
}

bool UUDGameActionTileExploit::IsTileRented(TObjectPtr<UUDWorldState> world, FIntPoint tile, int32 playerId) const
{
	for (auto& mod : ModifierManager->GetTileModifiers(world->Map->GetTile(tile), UUDExploitTilePermissionModifier::ModifierTypeId))
	{
		TObjectPtr<UUDExploitTilePermissionModifier> castedMod = Cast<UUDExploitTilePermissionModifier>(mod);
		if (castedMod->PlayerId == playerId)
		{
			return true;
		}
	}
	return false;
}

#define LOCTEXT_NAMESPACE "TileExploit"
FUDActionPresentation UUDGameActionTileExploit::GetPresentation() const
{
	if (GetId() != UUDGameActionTileExploit::ActionTypeId)
		return Super::GetPresentation();
	FUDActionPresentation presentation = FUDActionPresentation();
	presentation.ActionId = GetId();
	presentation.Name = FText(LOCTEXT("TileExploit", "Exploit Tile")).ToString();
	presentation.Tags.Append(
		{
			UD_ACTION_TAG_VALID,
			UD_ACTION_TAG_STRATAGEM,
			UD_ACTION_TAG_STRATAGEM_COST_1,
		}
	);

	return presentation;
}
#undef LOCTEXT_NAMESPACE