// Copyright Miroslav Valach

#include "Core/Simulation/Actions/UDGameActionTileExploit.h"

const int UUDExploitTestValue = 100;

bool UUDGameActionTileExploit::CanExecute(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	bool result = IUDActionInterface::CanExecute(data, world);
	if (result)
	{
		FUDTileValueData data = UUDGameActionTileExploit::ConvertData(data);
		FIntPoint tile(action.X, action.Y);
		bool isOwner = world->Map->GetTile(tile)->OwnerUniqueId == action.InvokerPlayerId;
		bool isRenting = false;

		for (auto& mod : ModifierManager->GetTileModifiers(
			world->Map->GetTile(tile),
			UUDExploitTilePermissionModifier::ModifierTypeId)
			)
		{
			TObjectPtr<UUDExploitTilePermissionModifier> castedMod = Cast<UUDExploitTilePermissionModifier>(mod);
			if (castedMod->PlayerId == action.InvokerPlayerId)
			{
				isRenting = true;
				break;
			}
		}

		bool ownerOrRenting = isOwner || isRenting;
		result = result && ownerOrRenting;
	}
	return result;

}

void UUDGameActionTileExploit::Execute(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Execute(data, world);
	// Apply exploitation
	FUDTileValueData data = UUDGameActionTileExploit::ConvertData(data);
	world->Players[action.InvokerPlayerId]->ResourceGold += UUDExploitTestValue;
}

void UUDGameActionTileExploit::Revert(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Revert(data, world);
	// Remove exploitation
	FUDTileValueData data = UUDGameActionTileExploit::ConvertData(data);
	world->Players[action.InvokerPlayerId]->ResourceGold -= UUDExploitTestValue;
}