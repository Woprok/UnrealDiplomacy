// Copyright Miroslav Valach

#include "Core/Simulation/Actions/UDGameActionTileExploit.h"

const int UUDExploitTestValue = 100;

bool UUDGameActionTileExploit::CanExecute(FUDActionData& actionData, TObjectPtr<UUDWorldState> targetWorldState)
{
	bool result = IUDActionInterface::CanExecute(actionData, targetWorldState);
	if (result)
	{
		FUDTileValueData data = UUDGameActionTileExploit::ConvertData(actionData);
		FIntPoint tile(data.X, data.Y);
		bool isOwner = targetWorldState->Map->GetTile(tile)->OwnerUniqueId == actionData.InvokerPlayerId;
		bool isRenting = false;

		for (auto& mod : ModifierManager->GetTileModifiers(
			targetWorldState->Map->GetTile(tile),
			UUDExploitTilePermissionModifier::ModifierTypeId)
			)
		{
			TObjectPtr<UUDExploitTilePermissionModifier> castedMod = Cast<UUDExploitTilePermissionModifier>(mod);
			if (castedMod->PlayerId == actionData.InvokerPlayerId)
			{
				isRenting = true;
				break;
			}
		}

		bool ownerOrRenting = isOwner || isRenting;
		result = result && ownerOrRenting;
	}
	return result;

}

void UUDGameActionTileExploit::Execute(FUDActionData& actionData, TObjectPtr<UUDWorldState> targetWorldState)
{
	IUDActionInterface::Execute(actionData, targetWorldState);
	// Apply exploitation
	FUDTileValueData data = UUDGameActionTileExploit::ConvertData(actionData);
	targetWorldState->Players[actionData.InvokerPlayerId]->ResourceGold += UUDExploitTestValue;
}

void UUDGameActionTileExploit::Revert(FUDActionData& actionData, TObjectPtr<UUDWorldState> targetWorldState)
{
	IUDActionInterface::Revert(actionData, targetWorldState);
	// Remove exploitation
	FUDTileValueData data = UUDGameActionTileExploit::ConvertData(actionData);
	targetWorldState->Players[actionData.InvokerPlayerId]->ResourceGold -= UUDExploitTestValue;
}