// Copyright Miroslav Valach

#include "Core/Simulation/Actions/UDGameActionTileExploit.h"
#include "Core/UDGlobalData.h"
#include "Core/Simulation/UDActionData.h"
#include "Core/Simulation/UDWorldState.h"
#include "Core/Simulation/UDModifierManager.h"
#include "Core/Simulation/UDModifierData.h"
#include "Core/Simulation/Modifiers/UDTileModifierPermitExploit.h"
#include "Core/Simulation/UDResourceManager.h"

bool UUDGameActionTileExploit::CanExecute(const FUDActionData& action, TObjectPtr<UUDWorldState> world) const
{
	FUDGameDataTileAmount data(action.ValueParameters);
	FIntPoint tile(data.X, data.Y);
	const TObjectPtr<UUDTileState>& editedTile = world->Map->GetTile(tile);

	bool isTileOwner = editedTile->OwnerUniqueId == action.InvokerFactionId;
	bool isTileRented = IsTileRented(editedTile, action.InvokerFactionId);

	bool canResourceExploit = editedTile->ResourceStockpile >= data.Amount;
	bool canOwnerExploit = isTileOwner || isTileRented;

	return IUDActionInterface::CanExecute(action, world) && canOwnerExploit && canResourceExploit;
}

void UUDGameActionTileExploit::Execute(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Execute(action, world);
	// Exploit tile for resources.
	FUDGameDataTileAmount data(action.ValueParameters);
	FIntPoint tile(data.X, data.Y);
	const TObjectPtr<UUDTileState>& editedTile = world->Map->GetTile(tile);

	int32 resourceType = editedTile->ResourceType;
	editedTile->ResourceStockpile -= data.Amount;

	ResourceManager->Add(world->Factions[action.InvokerFactionId], resourceType, data.Amount);
}

void UUDGameActionTileExploit::Revert(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Revert(action, world);
	// Return exploited resources.
	FUDGameDataTileAmount data(action.ValueParameters);
	FIntPoint tile(data.X, data.Y);
	const TObjectPtr<UUDTileState>& editedTile = world->Map->GetTile(tile);

	int32 resourceType = editedTile->ResourceType;
	editedTile->ResourceStockpile += data.Amount;

	ResourceManager->Substract(world->Factions[action.InvokerFactionId], resourceType, data.Amount);
}

void UUDGameActionTileExploit::SetModifierManager(TWeakObjectPtr<UUDModifierManager> modifierManager)
{
	ModifierManager = modifierManager;
}

bool UUDGameActionTileExploit::IsTileRented(const TObjectPtr<UUDTileState>& tile, int32 targetId) const
{
	FUDModifierData modifierData = FUDModifierData(
		UUDTileModifierPermitExploit::ModifierTypeId, 0,
		0, targetId
	);
	return ModifierManager->HasTileModifier(tile, modifierData);
}

#define LOCTEXT_NAMESPACE "TileExploit"
FUDActionPresentation UUDGameActionTileExploit::GetPresentation() const
{
	if (GetId() != UUDGameActionTileExploit::ActionTypeId)
		return Super::GetPresentation();
	FUDActionPresentation presentation = FUDActionPresentation();
	presentation.ActionId = GetId();
	presentation.Name = FText(LOCTEXT("TileExploit", "Exploit Tile")).ToString();
	presentation.Tags.Append(
		{
			UD_ACTION_TAG_VALID,
			UD_ACTION_TAG_STRATAGEM,
			UD_ACTION_TAG_STRATAGEM_COST_1,
			UD_ACTION_TAG_TILE_INTERACTION,
			UD_ACTION_TAG_PARAMETER_TILE,
			UD_ACTION_TAG_PARAMETER_VALUE,
			UD_ACTION_TAG_PARAMETER_VALUE_AMOUNT,
			UD_ACTION_TAG_PARAMETER_VALUE_SMALL_MAX,
		}
	);
	presentation.DealContentFormat = FText(LOCTEXT("TileExploit",
		"Faction [{INVOKER}] will attempt to exploit province [{TILE}] by [{VALUE}]."
	)).ToString();

	return presentation;
}
#undef LOCTEXT_NAMESPACE

void UUDGameActionTileExploit::SetResourceManager(TWeakObjectPtr<UUDResourceManager> resourceManager)
{
	ResourceManager = resourceManager;
}