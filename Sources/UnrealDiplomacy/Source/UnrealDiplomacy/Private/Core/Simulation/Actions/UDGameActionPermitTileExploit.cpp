// Copyright Miroslav Valach

#include "Core/Simulation/Actions/UDGameActionPermitTileExploit.h"
#include "Core/UDGlobalData.h"
#include "Core/Simulation/UDActionData.h"
#include "Core/Simulation/UDWorldState.h"
#include "Core/Simulation/UDModifierManager.h"
#include "Core/Simulation/UDModifierData.h"
#include "Core/Simulation/Modifiers/UDTileModifierPermitExploit.h"

bool UUDGameActionPermitTileExploit::CanExecute(const FUDActionData& action, TObjectPtr<UUDWorldState> world) const
{
	FUDGameDataTargetTile data(action.ValueParameters);
	FIntPoint tile(data.X, data.Y);
	const auto& editedTile = world->Map->GetTile(tile);
	FUDModifierData modifierData = FUDModifierData(
		UUDTileModifierPermitExploit::ModifierTypeId, action.UniqueId,
		action.InvokerFactionId, data.TargetId
	);
	bool isTileOwner = editedTile->OwnerUniqueId == action.InvokerFactionId;
	bool isNotSelfTargeting = action.InvokerFactionId != data.TargetId;
	bool isNotTileRented = !ModifierManager->HasValueEqualTileModifier(editedTile, modifierData);
	return IUDActionInterface::CanExecute(action, world) && isTileOwner && isNotTileRented && isNotSelfTargeting;
}

void UUDGameActionPermitTileExploit::Execute(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Execute(action, world);
	// Apply exploit permission modifier
	FUDGameDataTargetTile data(action.ValueParameters);
	FIntPoint tile(data.X, data.Y);
	FUDModifierData modifierData = FUDModifierData(
		UUDTileModifierPermitExploit::ModifierTypeId, action.UniqueId,
		action.InvokerFactionId, data.TargetId
	);
	ModifierManager->CreateTileModifier(world->Map->GetTile(tile), modifierData);
}

void UUDGameActionPermitTileExploit::Revert(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Revert(action, world);
	// Removes exploit permission modifier
	FUDGameDataTargetTile data(action.ValueParameters);
	FIntPoint tile(data.X, data.Y);
	ModifierManager->RemoveTileModifier(world->Map->GetTile(tile), action.UniqueId);
}

void UUDGameActionPermitTileExploit::SetModifierManager(TWeakObjectPtr<UUDModifierManager> modifierManager)
{
	ModifierManager = modifierManager;
}

#define LOCTEXT_NAMESPACE "PermitTileExploit"
FUDActionPresentation UUDGameActionPermitTileExploit::GetPresentation() const
{
	if (GetId() != UUDGameActionPermitTileExploit::ActionTypeId)
		return Super::GetPresentation();
	FUDActionPresentation presentation = FUDActionPresentation();
	presentation.ActionId = GetId();
	presentation.Name = FText(LOCTEXT("PermitTileExploit", "Tile Exploit Permit")).ToString();
	presentation.Tags.Append(
		{
			UD_ACTION_TAG_VALID,
			UD_ACTION_TAG_STRATAGEM,
			UD_ACTION_TAG_STRATAGEM_COST_1,
			UD_ACTION_TAG_FACTION_INTERACTION,
			UD_ACTION_TAG_PARAMETER_FACTION,
			UD_ACTION_TAG_PARAMETER_TILE,
			UD_ACTION_TAG_DECISION_DIRECT,
			UD_ACTION_TAG_DECISION_REQUEST,
			UD_ACTION_TAG_DECISION_DEMAND,
		}
	);	
	presentation.MessageContentFormat = FText(LOCTEXT("Gift",
		"Faction [{INVOKER}] permits exploiting province [{TILE}] to [{TARGET}]."
	)).ToString();
	presentation.DealContentFormat = FText(LOCTEXT("PermitTileExploit",
		"Faction [{INVOKER}] will permit exploiting province [{TILE}] to [{TARGET}]."
	)).ToString();
	
	return presentation;
}
#undef LOCTEXT_NAMESPACE