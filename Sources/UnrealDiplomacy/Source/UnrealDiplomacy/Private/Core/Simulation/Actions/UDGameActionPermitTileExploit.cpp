// Copyright Miroslav Valach

#include "Core/Simulation/Actions/UDGameActionPermitTileExploit.h"
#include "Core/UDGlobalData.h"
#include "Core/Simulation/UDActionData.h"
#include "Core/Simulation/UDWorldState.h"
#include "Core/Simulation/UDModifierManager.h"

bool UUDGameActionPermitTileExploit::CanExecute(const FUDActionData& action, TObjectPtr<UUDWorldState> world) const
{
	FUDGameDataTargetTile data(action.ValueParameters);
	FIntPoint tile(data.X, data.Y);
	bool isTileOwner = world->Map->GetTile(tile)->OwnerUniqueId == action.InvokerFactionId;
	bool isNotTileRented = !IsTileRented(world, tile);
	return IUDActionInterface::CanExecute(action, world) && isTileOwner && isNotTileRented;
}

void UUDGameActionPermitTileExploit::Execute(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Execute(action, world);
	// Apply exploit permission modifier
	FUDGameDataTargetTile data(action.ValueParameters);
	FIntPoint tile(data.X, data.Y);
	ModifierManager->ApplyTileModifier(world->Map->GetTile(tile),
	UUDExploitTilePermissionModifier::Create(action.SourceUniqueId, data.TargetId));
}

void UUDGameActionPermitTileExploit::Revert(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Revert(action, world);
	// Removes exploit permission modifier
	FUDGameDataTargetTile data(action.ValueParameters);
	FIntPoint tile(data.X, data.Y);
	ModifierManager->RemoveTileModifier(world->Map->GetTile(tile), action.SourceUniqueId);
}

void UUDGameActionPermitTileExploit::SetModifierManager(TObjectPtr<UUDModifierManager> modifierManager)
{
	ModifierManager = modifierManager;
}

bool UUDGameActionPermitTileExploit::IsTileRented(TObjectPtr<UUDWorldState> world, FIntPoint tile) const
{
	for (auto& mod : ModifierManager->GetTileModifiers(world->Map->GetTile(tile), UUDExploitTilePermissionModifier::ModifierTypeId))
	{
		TObjectPtr<UUDExploitTilePermissionModifier> castedMod = Cast<UUDExploitTilePermissionModifier>(mod);
		return true;
	}
	return false;
}

#define LOCTEXT_NAMESPACE "PermitTileExploit"
FUDActionPresentation UUDGameActionPermitTileExploit::GetPresentation() const
{
	if (GetId() != UUDGameActionPermitTileExploit::ActionTypeId)
		return Super::GetPresentation();
	FUDActionPresentation presentation = FUDActionPresentation();
	presentation.ActionId = GetId();
	presentation.Name = FText(LOCTEXT("PermitTileExploit", "Tile Exploit Permit")).ToString();
	presentation.Tags.Append(
		{
			UD_ACTION_TAG_VALID,
			UD_ACTION_TAG_STRATAGEM,
			UD_ACTION_TAG_STRATAGEM_COST_1,
		}
	);

	return presentation;
}
#undef LOCTEXT_NAMESPACE