// Copyright Miroslav Valach

#include "Core/Simulation/Actions/UDGameActionPermitTileExploit.h"

bool UUDGameActionPermitTileExploit::CanExecute(FUDActionData& actionData, TObjectPtr<UUDWorldState> targetWorldState)
{
	bool result = IUDActionInterface::CanExecute(actionData, targetWorldState);
	if (result)
	{
		FUDTargetTileData data = UUDGameActionPermitTileExploit::ConvertData(actionData);
		FIntPoint tile(data.X, data.Y);
		bool isInvokerOwner = targetWorldState->Map->GetTile(tile)->OwnerUniqueId == actionData.InvokerPlayerId;
		result = result && isInvokerOwner;
	}
	return result;
}

void UUDGameActionPermitTileExploit::Execute(FUDActionData& actionData, TObjectPtr<UUDWorldState> targetWorldState)
{
	IUDActionInterface::Execute(actionData, targetWorldState);
	// Apply modifier
	FUDTargetTileData data = UUDGameActionPermitTileExploit::ConvertData(actionData);
	FIntPoint tile(data.X, data.Y);
	ModifierManager->ApplyTileModifier(targetWorldState->Map->GetTile(tile),
		UUDExploitTilePermissionModifier::Create(actionData.SourceUniqueId, data.TargetId));
}

void UUDGameActionPermitTileExploit::Revert(FUDActionData& actionData, TObjectPtr<UUDWorldState> targetWorldState)
{
	IUDActionInterface::Revert(actionData, targetWorldState);
	// Removes modifier
	FUDTargetTileData data = UUDGameActionPermitTileExploit::ConvertData(actionData);
	FIntPoint tile(data.X, data.Y);
	ModifierManager->RemoveTileModifier(targetWorldState->Map->GetTile(tile), actionData.SourceUniqueId);
}
