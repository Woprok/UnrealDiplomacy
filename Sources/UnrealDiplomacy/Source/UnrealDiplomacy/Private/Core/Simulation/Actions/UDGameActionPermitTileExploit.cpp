// Copyright Miroslav Valach

#include "Core/Simulation/Actions/UDGameActionPermitTileExploit.h"

bool UUDGameActionPermitTileExploit::CanExecute(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	bool result = IUDActionInterface::CanExecute(data, world);
	if (result)
	{
		FUDTargetTileData data = UUDGameActionPermitTileExploit::ConvertData(data);
		FIntPoint tile(action.X, action.Y);
		bool isInvokerOwner = world->Map->GetTile(tile)->OwnerUniqueId == action.InvokerPlayerId;
		result = result && isInvokerOwner;
	}
	return result;
}

void UUDGameActionPermitTileExploit::Execute(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Execute(data, world);
	// Apply modifier
	FUDTargetTileData data = UUDGameActionPermitTileExploit::ConvertData(data);
	FIntPoint tile(action.X, action.Y);
	ModifierManager->ApplyTileModifier(world->Map->GetTile(tile),
		UUDExploitTilePermissionModifier::Create(action.SourceUniqueId, action.TargetId));
}

void UUDGameActionPermitTileExploit::Revert(const FUDActionData& action, TObjectPtr<UUDWorldState> world)
{
	IUDActionInterface::Revert(data, world);
	// Removes modifier
	FUDTargetTileData data = UUDGameActionPermitTileExploit::ConvertData(data);
	FIntPoint tile(action.X, action.Y);
	ModifierManager->RemoveTileModifier(world->Map->GetTile(tile), action.SourceUniqueId);
}
